
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000174  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000308  08000310  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000308  08000308  00001310  2**0
                  CONTENTS
  4 .ARM          00000000  08000308  08000308  00001310  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000308  08000310  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000308  08000308  00001308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800030c  0800030c  0000130c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000310  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000310  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000226  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000fd  00000000  00000000  00001566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00001668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000032  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fad  00000000  00000000  000016ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004fc  00000000  00000000  00002697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003dbe  00000000  00000000  00002b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006951  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000080  00000000  00000000  00006994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00006a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002f0 	.word	0x080002f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080002f0 	.word	0x080002f0

080001d4 <delay>:
 */

#include <stdint.h>
#include <stm32f401xx.h>

void delay(){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1000000; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	@ (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	ddf8      	ble.n	80001e0 <delay+0xc>
}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	000f423f 	.word	0x000f423f

08000200 <main>:
int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
		RCC->AHB1ENR |= (1<<0);
 8000204:	4b11      	ldr	r3, [pc, #68]	@ (800024c <main+0x4c>)
 8000206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000208:	4a10      	ldr	r2, [pc, #64]	@ (800024c <main+0x4c>)
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	6313      	str	r3, [r2, #48]	@ 0x30

		GPIOA->MODER |= (1 << (2*2));
 8000210:	4b0f      	ldr	r3, [pc, #60]	@ (8000250 <main+0x50>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a0e      	ldr	r2, [pc, #56]	@ (8000250 <main+0x50>)
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]

		GPIOA->ODR |= (1 << 2);
 800021c:	4b0c      	ldr	r3, [pc, #48]	@ (8000250 <main+0x50>)
 800021e:	695b      	ldr	r3, [r3, #20]
 8000220:	4a0b      	ldr	r2, [pc, #44]	@ (8000250 <main+0x50>)
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6153      	str	r3, [r2, #20]

    /* Loop forever */
	while(1){
		GPIOA -> ODR &= (0 << 2);
 8000228:	4b09      	ldr	r3, [pc, #36]	@ (8000250 <main+0x50>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	4b08      	ldr	r3, [pc, #32]	@ (8000250 <main+0x50>)
 800022e:	2200      	movs	r2, #0
 8000230:	615a      	str	r2, [r3, #20]
		delay();
 8000232:	f7ff ffcf 	bl	80001d4 <delay>
		GPIOA -> ODR |= (1 << 2);
 8000236:	4b06      	ldr	r3, [pc, #24]	@ (8000250 <main+0x50>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	4a05      	ldr	r2, [pc, #20]	@ (8000250 <main+0x50>)
 800023c:	f043 0304 	orr.w	r3, r3, #4
 8000240:	6153      	str	r3, [r2, #20]
		delay();
 8000242:	f7ff ffc7 	bl	80001d4 <delay>
		GPIOA -> ODR &= (0 << 2);
 8000246:	bf00      	nop
 8000248:	e7ee      	b.n	8000228 <main+0x28>
 800024a:	bf00      	nop
 800024c:	40023800 	.word	0x40023800
 8000250:	40020000 	.word	0x40020000

08000254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000254:	480d      	ldr	r0, [pc, #52]	@ (800028c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000256:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000258:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800025c:	480c      	ldr	r0, [pc, #48]	@ (8000290 <LoopForever+0x6>)
  ldr r1, =_edata
 800025e:	490d      	ldr	r1, [pc, #52]	@ (8000294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000260:	4a0d      	ldr	r2, [pc, #52]	@ (8000298 <LoopForever+0xe>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800026c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800026e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000272:	4a0a      	ldr	r2, [pc, #40]	@ (800029c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000274:	4c0a      	ldr	r4, [pc, #40]	@ (80002a0 <LoopForever+0x16>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800027e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000282:	f000 f811 	bl	80002a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000286:	f7ff ffbb 	bl	8000200 <main>

0800028a <LoopForever>:

LoopForever:
  b LoopForever
 800028a:	e7fe      	b.n	800028a <LoopForever>
  ldr   r0, =_estack
 800028c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000294:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000298:	08000310 	.word	0x08000310
  ldr r2, =_sbss
 800029c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a4:	e7fe      	b.n	80002a4 <ADC_IRQHandler>
	...

080002a8 <__libc_init_array>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	4d0d      	ldr	r5, [pc, #52]	@ (80002e0 <__libc_init_array+0x38>)
 80002ac:	4c0d      	ldr	r4, [pc, #52]	@ (80002e4 <__libc_init_array+0x3c>)
 80002ae:	1b64      	subs	r4, r4, r5
 80002b0:	10a4      	asrs	r4, r4, #2
 80002b2:	2600      	movs	r6, #0
 80002b4:	42a6      	cmp	r6, r4
 80002b6:	d109      	bne.n	80002cc <__libc_init_array+0x24>
 80002b8:	4d0b      	ldr	r5, [pc, #44]	@ (80002e8 <__libc_init_array+0x40>)
 80002ba:	4c0c      	ldr	r4, [pc, #48]	@ (80002ec <__libc_init_array+0x44>)
 80002bc:	f000 f818 	bl	80002f0 <_init>
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	10a4      	asrs	r4, r4, #2
 80002c4:	2600      	movs	r6, #0
 80002c6:	42a6      	cmp	r6, r4
 80002c8:	d105      	bne.n	80002d6 <__libc_init_array+0x2e>
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d0:	4798      	blx	r3
 80002d2:	3601      	adds	r6, #1
 80002d4:	e7ee      	b.n	80002b4 <__libc_init_array+0xc>
 80002d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002da:	4798      	blx	r3
 80002dc:	3601      	adds	r6, #1
 80002de:	e7f2      	b.n	80002c6 <__libc_init_array+0x1e>
 80002e0:	08000308 	.word	0x08000308
 80002e4:	08000308 	.word	0x08000308
 80002e8:	08000308 	.word	0x08000308
 80002ec:	0800030c 	.word	0x0800030c

080002f0 <_init>:
 80002f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f2:	bf00      	nop
 80002f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f6:	bc08      	pop	{r3}
 80002f8:	469e      	mov	lr, r3
 80002fa:	4770      	bx	lr

080002fc <_fini>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr
